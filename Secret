import java.util.*;

public class SetOperations {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to Set Operations Program!");

        while (true) {
            // Ask user for the universal set
            System.out.println("Enter the elements of the universal set separated by spaces:");
            Set<Integer> universalSet = readSet(scanner);

            // Ask user how many groups of sets they want
            System.out.print("Enter the number of groups of sets: ");
            int numOfGroups = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            List<Set<Integer>> setGroups = new ArrayList<>();

            // Create groups of sets
            for (int i = 0; i < numOfGroups; i++) {
                System.out.println("Enter elements of Set " + (i + 1) + " separated by spaces:");
                setGroups.add(readSet(scanner));
            }

            boolean exitProgram = false;
            while (!exitProgram) {
                // Select operation
                System.out.println("Select the operation you want to perform:");
                System.out.println("1. Complement");
                System.out.println("2. Intersection");
                System.out.println("3. Union");
                System.out.println("4. Difference");
                System.out.println("5. Exit Program");

                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character

                // Perform operation based on user choice
                switch (choice) {
                    case 1:
                        performComplement(setGroups, universalSet, scanner);
                        break;
                    case 2:
                        performIntersection(setGroups, scanner);
                        break;
                    case 3:
                        performUnion(setGroups, scanner);
                        break;
                    case 4:
                        performDifference(setGroups, scanner);
                        break;
                    case 5:
                        exitProgram = true;
                        break;
                    default:
                        System.out.println("Invalid choice! Please select a valid operation.");
                }

                if (!exitProgram) {
                    // Ask user if they want to perform another operation or exit
                    System.out.print("Do you want to perform another operation? (yes/no): ");
                    String continueChoice = scanner.nextLine();
                    if (!continueChoice.equalsIgnoreCase("yes")) {
                        exitProgram = true;
                    }
                }
            }

            if (exitProgram) {
                System.out.println("Program ended.");
                break;
            }
        }

        scanner.close();
    }

    // Method to read a set from user input
    private static Set<Integer> readSet(Scanner scanner) {
        Set<Integer> set = new HashSet<>();
        String[] elements = scanner.nextLine().split(" ");
        for (String element : elements) {
            set.add(Integer.parseInt(element));
        }
        return set;
    }

    // Complement operation
    private static void performComplement(List<Set<Integer>> setGroups, Set<Integer> universalSet, Scanner scanner) {
        System.out.print("Enter the set index for complement: ");
        int setIndex = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character
        if (setIndex >= 1 && setIndex <= setGroups.size()) {
            Set<Integer> selectedSet = setGroups.get(setIndex - 1);
            Set<Integer> complementSet = complement(universalSet, selectedSet);
            System.out.println("Complement of Set " + setIndex + ": " + complementSet);
        } else {
            System.out.println("Invalid set index!");
        }
    }

    // Intersection operation
    private static void performIntersection(List<Set<Integer>> setGroups, Scanner scanner) {
        System.out.print("Do you want to use all sets for intersection? (yes/no): ");
        String choice = scanner.nextLine();
        Set<Integer> intersectionSet = new HashSet<>();
        if (choice.equalsIgnoreCase("yes")) {
            intersectionSet = intersection(setGroups);
        } else {
            System.out.print("Enter the indexes of sets to perform intersection separated by spaces: ");
            String[] indexes = scanner.nextLine().split(" ");
            for (String index : indexes) {
                int setIndex = Integer.parseInt(index);
                if (setIndex >= 1 && setIndex <= setGroups.size()) {
                    if (intersectionSet.isEmpty()) {
                        intersectionSet.addAll(setGroups.get(setIndex - 1));
                    } else {
                        intersectionSet.retainAll(setGroups.get(setIndex - 1));
                    }
                } else {
                    System.out.println("Invalid set index! Skipping...");
                }
            }
        }
        System.out.println("Intersection: " + intersectionSet);
    }

    // Union operation
    private static void performUnion(List<Set<Integer>> setGroups, Scanner scanner) {
        System.out.print("Do you want to use all sets for union? (yes/no): ");
        String choice = scanner.nextLine();
        Set<Integer> unionSet = new HashSet<>();
        if (choice.equalsIgnoreCase("yes")) {
            for (Set<Integer> set : setGroups) {
                unionSet.addAll(set);
            }
        } else {
            System.out.print("Enter the indexes of sets to perform union separated by spaces: ");
            String[] indexes = scanner.nextLine().split(" ");
            for (String index : indexes) {
                int setIndex = Integer.parseInt(index);
                if (setIndex >= 1 && setIndex <= setGroups.size()) {
                    unionSet.addAll(setGroups.get(setIndex - 1));
                } else {
                    System.out.println("Invalid set index! Skipping...");
                }
            }
        }
        System.out.println("Union: " + unionSet);
    }

    // Difference operation
    private static void performDifference(List<Set<Integer>> setGroups, Scanner scanner) {
        System.out.print("Enter the indexes of sets to perform difference (separated by spaces): ");
        String[] indexes = scanner.nextLine().split(" ");
        if (indexes.length != 2) {
            System.out.println("Invalid number of sets provided for difference operation!");
            return;
        }
        int firstSetIndex = Integer.parseInt(indexes[0]);
        int secondSetIndex = Integer.parseInt(indexes[1]);
        if (firstSetIndex < 1 || firstSetIndex > setGroups.size() || secondSetIndex < 1 || secondSetIndex > setGroups.size()) {
            System.out.println("Invalid set index!");
            return;
        }
        Set<Integer> differenceSet = new HashSet<>(setGroups.get(firstSetIndex - 1));
        differenceSet.removeAll(setGroups.get(secondSetIndex - 1));
        System.out.println("Difference: " + differenceSet);
    }

    // Complement operation
    private static Set<Integer> complement(Set<Integer> universalSet, Set<Integer> set) {
        Set<Integer> complementSet = new HashSet<>(universalSet);
        complementSet.removeAll(set);
        return complementSet;
    }

    // Intersection operation
    private static Set<Integer> intersection(List<Set<Integer>> setGroups) {
        Set<Integer> intersectionSet = new HashSet<>(setGroups.get(0));
        for (int i = 1; i < setGroups.size(); i++) {
            intersectionSet.retainAll(setGroups.get(i));
        }
        return intersectionSet;
    }
}
